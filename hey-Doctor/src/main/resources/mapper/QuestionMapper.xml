<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.heydoctor.app.mapper.QuestionMapper">
    <select id="selectList" resultType="questionListDTO">
        SELECT QUESTION_ID, USER_ID, QUESTION_TITLE, QUESTION_CONTENT,
               QUESTION_REGISTER_DATETIME, QUESTION_IS_PUBLIC, QUESTION_LIKE_COUNT,
               DOCTOR_DEPARTMENT_TYPE, READ_COUNT, BOOKMARKED_COUNT, ANSWER_COUNT
        FROM (
            SELECT ROWNUM R, QUESTION_ID, USER_ID, QUESTION_TITLE, QUESTION_CONTENT,
                   QUESTION_REGISTER_DATETIME, QUESTION_IS_PUBLIC, QUESTION_LIKE_COUNT,
                   DOCTOR_DEPARTMENT_TYPE, READ_COUNT, BOOKMARKED_COUNT, ANSWER_COUNT
            FROM (
                 SELECT Q.QUESTION_ID, Q.USER_ID, QUESTION_TITLE, QUESTION_CONTENT,
                        QUESTION_REGISTER_DATETIME, QUESTION_IS_PUBLIC, QUESTION_LIKE_COUNT,
                        DOCTOR_DEPARTMENT_TYPE, READ_COUNT,
                        NVL(BOOKMARKED_COUNT, 0) AS "BOOKMARKED_COUNT", NVL(ANSWER_COUNT, 0) AS "ANSWER_COUNT"
                 FROM TBL_QUESTION Q LEFT OUTER JOIN (
                     SELECT B.QUESTION_ID, BOOKMARKED_COUNT, ANSWER_COUNT
                     FROM (
                         SELECT QUESTION_ID, COUNT(USER_ID) BOOKMARKED_COUNT
                         FROM TBL_QUESTION_BOOKMARK
                         GROUP BY QUESTION_ID
                     ) B FULL OUTER JOIN (
                         SELECT QUESTION_ID, COUNT(ANSWER_ID) ANSWER_COUNT
                         FROM TBL_ANSWER
                         GROUP BY QUESTION_ID
                     ) R
                     ON B.QUESTION_ID = R.QUESTION_ID
                 ) C
                 ON Q.QUESTION_ID = C.QUESTION_ID
                 <if test="type != 'ALL'.toString()">
                     WHERE DOCTOR_DEPARTMENT_TYPE = #{type}
                 </if>
                 ORDER BY QUESTION_REGISTER_DATETIME DESC
            )
        )
        <![CDATA[WHERE R > #{page} * 10 AND R <= #{page} * 10 + 11]]>
    </select>

    <sql id="vhlxzbxl">
        SELECT QUESTION_ID, USER_ID, QUESTION_TITLE, QUESTION_CONTENT,
               QUESTION_REGISTER_DATETIME, QUESTION_IS_PUBLIC, QUESTION_LIKE_COUNT,
               DOCTOR_DEPARTMENT_TYPE, READ_COUNT, BOOKMARKED_COUNT, ANSWER_COUNT
        FROM (
            SELECT QUESTION_ID, USER_ID, QUESTION_TITLE, QUESTION_CONTENT,
                   QUESTION_REGISTER_DATETIME, QUESTION_IS_PUBLIC, QUESTION_LIKE_COUNT,
                   DOCTOR_DEPARTMENT_TYPE, READ_COUNT, BOOKMARKED_COUNT, ANSWER_COUNT
            FROM TBL_QUESTION Q
            JOIN (
                SELECT B.QUESTION_ID,
                       NVL(NULLABLE_BOOKMARKED_COUNT, 0) AS BOOKMARKED_COUNT,
                       NVL(NULLABLE_ANSWER_COUNT, 0) AS ANSWER_COUNT
                FROM (
                    SELECT QUESTION_ID, COUNT(USER_ID) BOOKMARKED_COUNT AS NULLABLE_BOOKMARKED_COUNT
                    FROM TBL_QUESTION_BOOKMARK
                    GROUP BY QUESTION_ID
                ) B FULL OUTER JOIN (
                    SELECT QUESTION_ID, COUNT(ANSWER_ID) ANSWER_COUNT AS NULLABLE_ANSWER_COUNT
                    FROM TBL_ANSWER
                    GROUP BY QUESTION_ID
                ) R
                ON B.QUESTION_ID = R.QUESTION_ID
            ) COUNTS
            ON COUNTS.QUESTION_ID = Q.QUESTION_ID
            <if test="type != 'ALL'.toString()">
                WHERE DOCTOR_DEPARTMENT_TYPE = #{type}
            </if>
            ORDER BY QUESTION_REGISTER_DATETIME DESC
        )
        <![CDATA[WHERE ROWNUM > #{page} * 10 AND ROWNUM <= #{page} * 10 + 11]]>
    </sql>

    <select id="selectOne" resultType="questionDTO">
        SELECT Q.QUESTION_ID, Q.USER_ID, QUESTION_TITLE, QUESTION_CONTENT,
               QUESTION_REGISTER_DATETIME, QUESTION_IS_PUBLIC, QUESTION_LIKE_COUNT,
               DOCTOR_DEPARTMENT_TYPE, READ_COUNT, NVL(C.BOOKMARK_COUNT, 0) AS "BOOKMARK_COUNT", U.USER_NAME,
               U.USER_PROFILE_PATH, U.USER_PROFILE_NAME, U.USER_PROFILE_SIZE, U.USER_PROFILE_TYPE,
               U.USER_PROFILE_UUID
        FROM TBL_USER U
        JOIN TBL_QUESTION Q ON U.USER_ID = Q.USER_ID AND QUESTION_ID = #{questionId}
        LEFT OUTER JOIN (
            SELECT QUESTION_ID, COUNT(USER_ID) BOOKMARK_COUNT
            FROM TBL_QUESTION_BOOKMARK
            GROUP BY QUESTION_ID
        ) C ON Q.QUESTION_ID = C.QUESTION_ID
    </select>

    <insert id="insert">
        <selectKey keyProperty="questionId" resultType="long" order="BEFORE">
            SELECT SEQ_QUESTION.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_QUESTION (
            QUESTION_ID, USER_ID, QUESTION_TITLE, QUESTION_CONTENT,
            QUESTION_IS_PUBLIC, DOCTOR_DEPARTMENT_TYPE
        )
        VALUES (
            #{questionId}, #{userId}, #{questionTitle}, #{questionContent},
            #{questionIsPublic}, #{doctorDepartmentType}
        )
    </insert>

    <select id="selectReadDESCAll" resultType="questionVO">
        SELECT USER_ID, QUESTION_TITLE, QUESTION_CONTENT, QUESTION_REGISTER_DATETIME,QUESTION_LIKE_COUNT, DOCTOR_DEPARTMENT_TYPE, READ_COUNT
        FROM TBL_QUESTION
        ORDER BY READ_COUNT
        DESC
    </select>

    <update id="updateReadCount">
        UPDATE TBL_QUESTION
        SET READ_COUNT = READ_COUNT + 1
        WHERE QUESTION_ID = #{questionId}
    </update>

</mapper>

